#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>
#define SIZE 80

typedef struct node_binary my_binary;
typedef struct node_label my_label;
typedef struct node_line my_line;
typedef struct node_macro my_macro;
my_binary *getInstructionBinary(int index, int *errors, int *ic, char *line, my_label *labels);
my_binary *getDataBinary(int index, int *errors, int *dc, char *line, my_label *labels);
char *scanMacros(char source[]);
char *duplicateString(char *arr);
char *firstMacroString(char *p);
char *firstString(char *p);
char *firstOperand(char *p);
char *firstLabel(char *p);
char *firstLabelDefinition(char *p);
char *lastParameter(char *p);
char *convertNumberToBinary(int num);
char *convertImmediateToBinary(int num);
char *convertRegisterToBinary(int source, int dest);
char *convertLabelToBinary(my_label *head, char *label);
char *convertLabel(my_label *head, char *label);
char *getLabelName(my_label *label);
char *getBinaryCode(my_binary *binary);
char *getBinaryLabel(my_binary *binary);
char *generateObName(char *fullName);
char *generateEntName(char *fullName);
char *generateExtName(char *fullName);
char *generateAmName(char fullName[]);
char *generateAsName(char fullName[]);
my_label *newLabel(int index, char *name, int type);
my_label *searchLabel(my_label *head, char *label);
my_label *getLabelNext(my_label *label);
my_binary *getBinaryNext(my_binary *binary);
my_binary *newBinary(int index, char *code, char *label);
my_macro *newMacro(char *name, my_line *lines);
char *getMacroName(my_macro *macro);
my_line *getMacroLines(my_macro *macro);
my_macro *getMacroNext(my_macro *macro);
void setMacroLines(my_macro *macro, my_line *line);
void setMacroNext(my_macro *macro, my_macro *nextMacro);
my_macro *searchMacro(my_macro *head, char *otherName);
my_line *newLine(char *str);
char *getLineCode(my_line *line);
my_line *getLineNext(my_line *line);
void setLineCode(my_line *line, char *str);
void setLineNext(my_line *line, my_line *nextLine);
int lastCharPosition(char *str, char ch);
int isValidInt(char *str);
int isValidImmediate(char *str);
int isValidLabel(char *str);
int isValidName(char str[]);
int isValidRegister(char *str);
int isValidComma(char *str);
int isValidEndingBracket(char *str);
int isLineEmpty(char *p);
int isInstruction(char str[]);
int isWhitespace(char ch);
int getLabelIndex(my_label *label);
int getLabelType(my_label *label);
int getBinaryIndex(my_binary *binary);
int isStringEmpty(char *p);
void printLinesToFile(my_line *head, FILE *fp);
void printMacrosToFile(my_macro *head, FILE *fp);
void printBinaryChain(my_binary *p);
void printLabelChain(my_label *p);
void printError(int id, int lineIndex);
void printInstructions(my_binary *head_binary, my_binary *head_data, char *file_name, int ic, int dc);
void printEntries(my_label *p, char *file_name);
void printExternals(my_label *p, char *file_name);
void addToBinaryList(my_binary **head, my_binary *newBinaryNode);
void addToLabelList(my_label **head, my_label *newLabelNode);
void setLabelIndex(my_label *label, int newIndex);
void setLabelName(my_label *label, char *newName);
void setLabelType(my_label *label, int newType);
void setLabelNext(my_label *label, my_label *newNext);
void setBinaryIndex(my_binary *binary, int newIndex);
void setBinaryCode(my_binary *binary, char *newCode);
void setBinaryLabel(my_binary *binary, char *newLabelName);
void setBinaryNext(my_binary *binary, my_binary *newNext);
void updateDataLabels(my_label *head, int ic);
void convertToUniqueBinary(char *str);
void freeBinaryChain(my_binary **head);
void freeLabelChain(my_label **head);
void addNewLineToMacro(my_macro *macro, char *str);
void replaceLineWithMacro(my_line **head, my_macro *macro);
void addNewMacroToList(my_macro **list, my_macro *macro);
void addNewNonMacroLine(my_line **head, char *str);
void freeFileLines(my_line **head);
void freeMacros(my_macro **head);
void assemblerConstruction(char *file_name);
